import numpy as np
import torch
from torch.fft import fft2, ifft2
import matplotlib.pyplot as plt
from matplotlib import cm, animation
import numpy as np

plt.rcParams['animation.ffmpeg_path'] = '/usr/local/bin/ffmpeg'


def gauss(x, y):
    return torch.exp(-x * x - y * y)

def exactsol(x, y, t, a, m):
    return (a / (a + 1.0j * t / m)) \
        * torch.exp(-(x * x + y * y) / (2 * (a + 1.0j * t / m)))

#cuda = torch.device('cuda')
samples = 256
startX = -20
endX = 20
dx = (endX - startX) / samples
x = torch.arange(startX, endX, dx)
x = x.type(dtype=torch.cfloat)
gridX, gridY = torch.meshgrid(x, x)
kmax = np.pi/dx
dk = 2 * kmax / samples
dt = 0.01
k = torch.arange(-kmax, kmax, dk)
# k = torch.fft.fftshift(k)
gridKx, gridKy = torch.meshgrid(k, k)
squareK = gridKx * gridKx + gridKy * gridKy
squareK = squareK.type(dtype=torch.cfloat)
kTimeEvo = torch.exp(-1.0j * squareK * dt)
# kTimeEvo = kTimeEvo.to(device=cuda)
psi = torch.rand((samples, samples), dtype=torch.cfloat)
psik = torch.zeros((samples, samples), dtype=torch.cfloat)
 
# Coefficients for GP equation
alpha = 0.01
gammalp = 2
Gamma = 2
G = 0.1
R = 4
eta = 1

# Constant part of the potential
constV = (gridX / 16)**16 + (gridY / 16)**16 - 0.5j * gammalp
#constV = constV.to(device=cuda)

# Passing the square modulus of psi directly saves some computations in the big
# picture
def V(psiSqMod, nr, pump):
    return constV + alpha * psiSqMod\
            + G * (nr + eta * pump / Gamma) + 0.5j * R * nr

#pump = 200 * (gauss(gridX, gridY - 5) + gauss(gridX, gridY - 5))
pump = torch.zeros((samples, samples), dtype=torch.cfloat)
#pump = pump.to(device=cuda)
nR = torch.zeros((samples, samples), dtype=torch.cfloat)

for i in range(512):
    psiSqMod = psi.conj() * psi
    halfRTimeEvo = torch.exp(-0.5j * dt * V(psiSqMod, nR, pump))
    fft2(halfRTimeEvo * psi, out=psik)
    psik = psik * kTimeEvo
    ifft2(psik, out=psi)
    psi = halfRTimeEvo * psi 
    nr = torch.exp(-(Gamma + R * psiSqMod)*dt) * nR + pump * dt

#psi = psi.to(device='cpu')
psiSqMod = psi.conj_physical() * psi
psiSqMod = psiSqMod.type(dtype=torch.float)

fig, ax = plt.subplots()
im = ax.imshow(psiSqMod,
               cmap=cm.viridis,
               origin='lower',
               extent=[startX, endX, startX, endX])
fig.colorbar(im, ax=ax)
plt.savefig("wopumpnofftshift.png")
